#!/bin/sh

this_dir=$(cd -- "$(dirname -- "$0")" >/dev/null && pwd)
parsed_hash=
validation_mode=

display_help() {
    echo "Usage: $(basename "$0") <option> " >&2
    echo "Run validations on an sfdx project for: Formatting, Prettier, PMD, ESLint, and run Jest tests"
    echo "Options are mutually exclusive and only one may be provided"
    echo
    echo "Options:"
    echo "   -a, --all (default)                        run validations for the entire project"
    echo "   -p, --package <name> [<name>...]           run validations on one or more packages by <name>"
    echo "   -s, --staged                               run validations on staged files"
    echo "   -c, --commit [<hash>]                      run validations on <hash> commit against parent (default: HEAD)"
    echo "   -d, --diff <hash 1> [<hash 2>]             run validations on the diff between <hash 1> and <hash 2> (default: HEAD)"
    echo
    echo "   -h, --help                                 display this help"
    exit 1
}

check_if_in_git() {
    git rev-parse --show-toplevel >/dev/null 2>&1 || { echo "Not in a git repository" >&2 && exit 1; }
}

validate_commit() {
    parsed_hash=$(git rev-parse --short "$1" 2>/dev/null) || return 1
}

validate_exclusive_options() {
    [ -z $validation_mode ] || { echo "Only one option may be provided" >&2 && echo && display_help; }
}

args() {
    # Parse flags
    options=$(getopt -o apscdh --long 'all,package,staged,commit,diff,help' -- "$@") || exit 1
    eval set -- "$options"
    while true; do
        case "$1" in
            -a | --all)
                validate_exclusive_options
                validation_mode="all"
                shift
                ;;
            -p | --package)
                validate_exclusive_options
                validation_mode="package"
                shift
                ;;
            -s | --staged)
                validate_exclusive_options
                check_if_in_git
                validation_mode="staged"
                shift
                ;;
            -c | --commit)
                validate_exclusive_options
                validation_mode="commit"
                check_if_in_git
                shift
                ;;
            -d | --diff)
                validate_exclusive_options
                validation_mode="diff"
                check_if_in_git
                shift
                ;;
            -h | --help)
                validate_exclusive_options
                display_help
                ;;
            --)
                shift && break
                ;;
        esac
    done

    shift

    [ -n "$validation_mode" ] || validation_mode="all"

    # Validate flag parameters
    case "$validation_mode" in
        "package")
            [ -n "$1" ] || { echo "--package requires at least one name to be provided" >&2 && exit 1; }
            for package in "$@"; do
                [ "$(echo "$project_packages" | grep "$package" --line-regexp --count --directories=read)" -gt 0 ] || { echo "$package is not a valid package name" >&2 && exit 1; }
            done
            selected_packages="$*"
            ;;
        "commit")
            if [ -n "$1" ]; then
                hash=$1
            else
                hash="HEAD"
            fi
            validate_commit "$hash" || { echo "$hash is not a valid commit hash" >&2 && exit 1; }
            commit="$parsed_hash"
            if [ ! "$(git rev-parse --short "$commit^1" 2>/dev/null)" ]; then
                echo "$commit does not have a parent to validate against" >&2
                exit 1
            fi
            ;;
        "diff")
            [ -n "$1" ] || { echo "--diff requires at least one commit hash" >&2 && exit 1; }
            hash="$1"
            if [ -n "$2" ]; then
                hash_2=$2
            else
                hash_2=$(git rev-parse --short HEAD)
            fi
            validate_commit "$hash" || { echo "$hash is not a valid commit hash" >&2 && exit 1; }
            hash_1="$parsed_hash"
            validate_commit "$hash_2" || { echo "$hash_2 is not a valid commit hash" >&2 && exit 1; }
            hash_2="$parsed_hash"
            (git merge-base --is-ancestor "$hash_1" "$hash_2" 2>/dev/null) || { echo "$hash_2 is not an ancestor of $hash_1" >&2 && exit 1; }
            ;;

    esac
}

# Get all sfdx project packages
[ -f sfdx-project.json ] || { echo "Must be run from the root of an SFDX project" >&2 && exit 1; }
project_packages="$(jq .packageDirectories[].path sfdx-project.json | sed 's/"//g')"

# Get set of files to validate
fileset=
case "$validation_mode" in
    "all")
        fileset=$(echo "$project_packages" | sed 's| |\\ |g')
        ;;
    "package")
        fileset="$selected_packages"
        ;;
    "staged")
        fileset=$(git diff --cached --name-only --diff-filter=AM | sed 's| |\\ |g')
        ;;
    "commit")
        fileset=$(git diff --name-only --diff-filter=AM "$commit"^1.."$commit" | sed 's| |\\ |g')
        ;;
    "diff")
        fileset=$(git diff --name-only --diff-filter=AM "$hash_1".."$hash_2" | sed 's| |\\ |g')
        ;;
esac

utils_dir="$this_dir"/.utils

if [ ! "$PIPELINE_MODE" ]; then
    args "$0" "$@"
else
    validation_mode="commit"
    commit="HEAD"
fi

if [ ! "$PIPELINE_MODE" ]; then
    . "$utils_dir"/projectVersion
    . "$utils_dir"/formatting
    . "$utils_dir"/pmd
    . "$utils_dir"/lightning
fi
