#!/bin/sh
#
# Check for metadata (.xml) files to match a Salesforce API version
# Arguments:
#       A Salesforce API version all files must match (e.g.: 60.0)
#       A list of files or directories to check.
#       (optional) a list of files or directories to ignore

[ -n "$1" ] || [ -n "$2" ] || { echo "Not enough arguments provided" >&2 && exit 1; }

temp_ignore_file=/tmp/formatting_ignore_file
trap "rm -f $temp_ignore_file" EXIT
echo "$3" >"$temp_ignore_file"
sed -i 's|$|*|' "$temp_ignore_file"

env printf "\e[1;34m-----\n\u279C Checking project version\n-----\e[0m\n"

env printf "\e[1;33m\u2731\e[0m Project version is v%s\n" "$1"

violations=0
files_with_version=$(echo "$2" | xargs grep --perl "<(apiV|v)ersion\K.*(?=</(apiV|v)ersion>)" --with-filename --only-matching --recursive --include="*.xml" --)
while read -r line; do
    [ -n "$line" ] || continue

    filename="$(echo "$line" | cut -d ">" -f 1 | cut -d ":" -f 1)"
    file_api_version="$(echo "$line" | cut -d ">" -f 2)"
    if [ "$file_api_version" != "$1" ]; then
        env printf "\e[1;31m\xE2\x9D\x8C\e[0m %s (v%s) doesn't match project version\n" "$filename" "$file_api_version" >&2
        violations=$((violations + 1))
    fi
done <<EOF
$(echo "$files_with_version" | grep --invert-match --file="$temp_ignore_file" --)
EOF

if [ $violations -eq 0 ]; then
    env printf "\e[1;32m\u2713\e[0m All files match project version\n"
else
    env printf "\n\e[1;31m\xE2\x9D\x8C %s total project verion problems\e[0m\n" "$violations" >&2
    exit 1
fi
